name: 'Build signed addon on release or beta'

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-node@v3
      with:
        node-version: current

    - name: Install dependencies
      run: |
        npm i -g web-ext yarn
        echo "`npm config get prefix`/bin" >> $GITHUB_PATH

    - uses: actions/checkout@v3
      with:
        submodules: true
        # We need tags and (some) history for describe
        fetch-depth: 0

    - name: Update version number for beta
      if: github.event_name != 'release'
      run: |
        # NB. we are limited to a 4-number format and we use semantic versioning: major.minor.patch
        # so include the commits since last patch release as 4th number
        git describe --tags --long | (IFS=- read version commits hash && printf '%s.%d' "$version" "$commits" | tee beta-version)
        cp manifest.json original-manifest.json
        jq --rawfile ver beta-version '.version=$ver' original-manifest.json > manifest.json

    - name: Build extension
      run: |
        yarn install
        make build

    - name: Make unsigned release available
      uses: actions/upload-artifact@v3
      with:
        path: web-ext-artifacts/*.zip

    - name: Sign extension with optional uploading
      run: |
        [ "${{ github.event_name }}" = "release" ] && chan=listed || chan=unlisted
        echo "Signing v`jq -r .version manifest.json` for $chan channel"

        tmp=`mktemp`
        make sign WEBEXT_SIGN_ARGS="--channel $chan ${{ secrets.AMO_API_CREDS }} --timeout 3000" | tee "$tmp"
        # Ignore error that is not an error
        error=${PIPESTATUS[0]}
        grep -qxF "$tmp" \
                -e 'Your add-on has been submitted for review. It passed validation but could not be automatically signed because this is a listed add-on.' \
                -e 'WebExtError: Signing is still pending, you will receive an email once there is an update on the status of your submission. If you donâ€™t see the email after 24 hours, please check your Spam folder.' \
            || exit $error

    - name: Generate source zip
      run: make SOURCE=source.zip source

    - name: Generate source instructions
      run: |
        tee instructions.md <<EOF
        Instructions with yarn version `yarn --version`:
        1. Unzip source to current directory
        2. Build all libraries under lib/ with: \`yarn install --modules-folder lib\`
            - Only most standard libraries (markdown-it, highlightjs, mermaid, katex) use minification. Please validate by checksum or diff.
        3. Setup environment variables (adjust for your OS): \`export USE_TTF=false USE_WOFF=false USE_WOFF2=false\`
        EOF

        git submodule foreach --quiet 'echo $sm_path `git remote get-url origin` `git describe --tags`' | nl -v4 | while read num path url tag; do
        tee -a instructions.md <<EOF
        ${num}. Rebuild ${path#srclib/} from source:
           \`\`\`sh
           git clone -b $tag $url $path
           cd $path
           yarn install
           yarn build
           \`\`\`
        EOF
        done

    - name: Upload review sources and instructions
      run: |
        b64enc() {
            cat "$@" | base64 -w0 | sed 'y|+/|-_|;s/=*$//'
        }

        token() {
            read _ user _ secret < <(echo ${{ secrets.AMO_API_CREDS }})
            payload=$(jq -nrc --arg user $user --arg uuid `uuidgen` --arg now `date +%s` \
                '($now | tonumber) as $time | {iss: $user, jti: $uuid, iat: $time, exp: ($time + 300)}' \
            )
            data="$(printf '{"alg":"HS256","typ":"JWT"}' | b64enc).$(printf '%s' "$payload" | b64enc)"
            sign=$(printf '%s' "$data" | openssl dgst -sha256 -hmac "$secret" -binary | b64enc)
            echo "$data.$sign"
        }

        addon=markdown-viewer-webext
        version=`jq -r .version manifest.json`

        curl -L -H "Authorization: JWT `token`" -H "Content-type: application/json" \
            -X PATCH "https://addons.mozilla.org/api/v5/addons/addon/$addon/versions/$version/" \
            -d "$(jq -n '{approval_notes: $instr}' --rawfile instr instructions.md)" | jq .

        curl -L -H "Authorization: JWT `token`" -H "Content-type: multipart/form-data" \
            -X PATCH "https://addons.mozilla.org/api/v5/addons/addon/$addon/versions/$version/" \
            -F "source=@source.zip" | jq .
