name: 'Build signed addon on release or beta'

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        # We need tags and (some) history for describe
        fetch-depth: 0

    - uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        npm i -g web-ext yarn
        echo "`npm config get prefix`/bin" >> $GITHUB_PATH

    - name: Update version number for beta
      if: github.event_name != 'release'
      run: |
        # NB. we are limited to a 4-number format and we use semantic versioning: major.minor.patch
        # so include the commits since last patch release as 4th number
        git describe --tags --long | (IFS=- read version commits hash && printf '%s.%d' "$version" "$commits" > beta-version)
        cp manifest.json original-manifest.json
        jq --rawfile ver beta-version '.version=$ver' original-manifest.json > manifest.json

    - name: Build extension
      run: |
        make build

    - name: Make unsigned release available
      uses: actions/upload-artifact@v3
      with:
        path: web-ext-artifacts/*.zip

    - name: Sign extension with optional uploading
      run: |
        [ "${{ github.event_name }}" = "release" ] && chan=listed || chan=unlisted
        echo "Signing v`jq -r .version staging/manifest.json` for $chan channel"

        tmp=`mktemp`
        make sign WEBEXT_SIGN_ARGS="--channel $chan ${{ secrets.AMO_API_CREDS }}" | tee "$tmp"
        # Ignore error that is not an error
        error=${PIPESTATUS[0]}
        grep -qxF 'Your add-on has been submitted for review. It passed validation but could not be automatically signed because this is a listed add-on.' "$tmp" || exit $error
